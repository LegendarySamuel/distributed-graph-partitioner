#!/usr/bin/env bash
set -o pipefail
set -o errtrace
set -o nounset
set -o errexit

# This constant can be set at any customization point to pass additional 
# flags to any CMake invocation
CUSTOM_CMAKE_FLAGS=""

# Find the absolute path to this script
source=${BASH_SOURCE[0]}
while [ -L "$source" ]; do
  script_pwd=$(cd -P "$(dirname "$source")" >/dev/null 2>&1 && pwd)
  source=$(readlink "$source")
  [[ $source != /* ]] && source=$script_pwd/$source
done
script_pwd=$(cd -P "$(dirname "$source")" >/dev/null 2>&1 && pwd)
ROOT="$(realpath "$script_pwd/../")"

# Declares $mode, $skip_installed
. "$ROOT/bin/inc/cli.sh"

# Implements $mode == "init"
. "$ROOT/bin/inc/init.sh"

# Check that there is an Experiment file -- otherwise abort, except for --help, --init
[[ -f "Experiment" ]] || {
    echo "Error: no Experiment file contained in the current working directory"
    echo "  Run 'mkexp --init' to initialize a new experiment in the current directory"
    exit 1
}

################################################################################

. "$ROOT/bin/inc/userfuncs.sh"
. "$ROOT/bin/inc/sysfuncs.sh"
. "$ROOT/bin/inc/env.sh"
. "$ROOT/bin/inc/install.sh"
. "$ROOT/bin/inc/generate.sh"

gitignore_filename="$PWD/.gitignore"
submit_impl_filename="$PWD/jobs/starter.sh"
submit_filename="$PWD/submit.sh"
job_files_dir="$PWD/jobs"
log_files_dir="$PWD/logs"
misc_files_dir="$PWD/misc"
results_dir="$PWD/results"

# Create the basic directory structure for the experiments
mkdir -p "$PREFIX" "$PREFIX/bin" "$PREFIX/lib" "$PREFIX/include"

if [[ $mode == "generate" ]]; then 
    cat <<EOT > "$gitignore_filename"
submit.sh
parse.sh
nohup.out
logs/
jobs/
usr/
.Rhistory
slurm/
slurm-*
logs*/
all_jobs.sh
misc/
EOT

    mkdir -p "$job_files_dir"
    mkdir -p "$log_files_dir"
    mkdir -p "$misc_files_dir"

    echo "#!/usr/bin/env bash" > "$submit_filename"
    echo "#!/usr/bin/env bash" > "$submit_impl_filename"
    chmod +x "$submit_filename"
    chmod +x "$submit_impl_filename"
fi

# Read Experiment file
. Experiment

# Load the system -- there may only be one system definition per Experiment file
LoadSystem "$_system"

# Modes that depend on the system
. "$ROOT/bin/inc/transfer.sh"

HandleExperiment() {
    # Default unset variables
    [[ -v "_nodes_x_mpis_x_threads" ]] || _nodes_x_mpis_x_threads+=("1x1x1")
    [[ -v "_epsilons" ]] || _epsilons+=("0.03")
    [[ -v "_seeds" ]] || _seeds+=("0")

    fetch_everything=0
    install_everything=0
    if [[ $skip_install == "0" ]]; then
        if [[ $mode == "generate" || $mode == "install" || $mode == "fetch" ]]; then
            fetch_everything=1
        fi
        if [[ $mode == "generate" || $mode == "install" || $mode == "install-fetched" ]]; then 
            install_everything=1
        fi
    fi

    if [[ $fetch_everything == "1" || $install_everything == "1" ]]; then
        InstallLibraries "$fetch_everything" "$install_everything"
        InstallPartitioners "$fetch_everything" "$install_everything"
    fi

    if [[ $mode == "generate" ]]; then
        GenerateInfoFile
        Generate
    fi

    if [[ $mode == "results" ]]; then
        mkdir -p "$results_dir"
        for algorithm in ${_algorithms[@]}; do 
            base=$(GetAlgorithmBase "$algorithm")
            echo -e "Parsing log files for '$ALGO_COLOR$algorithm$NO_COLOR' using parser '$ALGO_COLOR$base$NO_COLOR'"
            mkresults "$base" "$log_files_dir/$algorithm" > "$results_dir/$algorithm.csv"
        done
    fi 

    if [[ $mode == "plots" ]]; then 
        mkplots ${_algorithms[@]}
    fi

    if [[ $mode == "stats" ]]; then 
        mkstats ${_algorithms[@]}
    fi
}

fallback_global_experiment=1
for function_name in $(declare -F | awk '{ print $3 }' | grep '^Experiment'); do 
    fallback_global_experiment=0
    PrintExperiment $function_name

    ResetExperiment
    . Experiment 
    $function_name

    experiment_name="$function_name"
    HandleExperiment
done

if [[ $fallback_global_experiment == "1" ]]; then 
    experiment_name="base"
    HandleExperiment
fi

if [[ $mode == "generate" ]]; then
    GenerateJobfileWrapper "$submit_impl_filename" >> "$submit_filename"
fi

if [[ $mode == "clean" || $mode == "purge" ]]; then 
    rm -rf "$submit_impl_filename" "$submit_filename" "$job_files_dir" 
fi

if [[ $mode == "purge" ]]; then
    echo "!!! About to delete the following files and directories:"
    echo "    $log_files_dir"
    echo "    $results_dir"
    echo "    $PREFIX"
    echo "    $PWD/INFO"
    read -p "Continue (y/n)?" cont
    if [[ $cont == "y" ]]; then
        rm -rf "$log_files_dir" "$results_dir" "$PREFIX" "$PWD/INFO"
    fi
fi

if [[ $mode == "submit" ]]; then 
    if [[ ! -f "$submit_filename" ]]; then 
        mkexp
    fi
    bash "$submit_filename"
fi

exit 0

