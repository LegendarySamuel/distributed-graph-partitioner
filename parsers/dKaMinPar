# -*-awk-*-
BEGIN {
    header()
    reset()
}

/__BEGIN_FILE__/ {
    sub(/__BEGIN_FILE__ /, "", $0)
    split($0, parts, "___")
    data["CompTime"] = 0.0
    data["CommTime"] = 0.0
    data["mPerLevel"] = ""
    data["ImbalancePerLevel"] = ""
    data["CoarseningLevel0"] = 0.0
    data["CoarseningTime"] = 0.0
    data["InitialPartitioningTime"] = 0.0
    data["UncoarseningTime"] = 0.0
    data["MPICommTime"] = 0.0
    data["RestCommTime"] = 0.0

    data["Graph"] = parts[1]

    split(parts[2], parts, "_")
    for (i in parts) {
        if (match(parts[i], /k([0-9]+)/, m)) {
            data["K"] = m[1]
        } else if (match(parts[i], /P([0-9]+)x([0-9]+)x([0-9]+)/, m)) {
            data["NumNodes"] = m[1]
            data["NumMPIsPerNode"] = m[2]
            data["NumThreadsPerMPI"] = m[3]
        } else if (match(parts[i], /seed([0-9]+)/, m)) {
            data["Seed"] = m[1]
        } else if (match(parts[i], /eps([0-9\.\-e]+)/, m)) {
            data["Epsilon"] = m[1]
        }
    }

    level = 0
}

/__END_FILE__/ {
    yield()
}

match($0, /Number of global nodes: *([0-9]+)/, m) {
    data["N"] = m[1]
}

match($0, /Number of global edges: *([0-9]+)/, m) {
    data["M"] = m[1]
}

match($0, /Seed: *([0-9]+)/, m) {
    data["Seed"] = m[1]
}

match($0, /Partition summary:/, m) {
    Summary = 1
}

match($0, /Imbalance: *([0-9\.\-e]+)/, m) {
    data["Balance"] = m[1]
}

match($0, /Edge cut: *([0-9]+)/, m) {
    data["Cut"] = m[1]
}

match($0, /\|-- Partitioning: \.* ([0-9\.\-e]+) s/, m) {
    data["Time"] = m[1]
1}
match($0, /`-- Partitioning: \.* ([0-9\.\-e]+) s/, m) {
    data["Time"] = m[1]
}

match($0, /Single chunk computation: ([0-9\.\-e]+)/, m) {
    data["CompTime"] += m[1]
}
match($0, /Single chunk communication: ([0-9\.\-e]+)/, m) {
    data["CommTime"] += m[1]
}

match($0, /Coarsening \-> Level [0-9]+,[0-9]+/) {
    data["NumLevels"] += 1
}

match($0, /Number of edges: *\[Min=([0-9]+) \| Mean=([0-9]+) \| Max=([0-9]+) \| Imbalance=[0-9\.\-e]+\]/, m) {
    if (data["mPerLevel"] == "")
        data["mPerLevel"] = m[1]"#"m[2]"#"m[3]
    else
        data["mPerLevel"] = data["mPerLevel"]"_"m[1]"#"m[2]"#"m[3]
}

match($0, /Number of edges: *\[Min=[0-9]+ \| Mean=[0-9]+ \| Max=[0-9]+ \| Imbalance=([0-9\.\-e]+)\]/, m) {
    if (data["ImbalancePerLevel"] == "")
        data["ImbalancePerLevel"] = m[1]
    else
        data["ImbalancePerLevel"] = data["ImbalancePerLevel"]"_"m[1]
}

match($0, / *\| *\|-- Coarsening \(Level 0\): \.* ([0-9\.\-e]+) s/, m) {
    data["CoarseningLevelZero"] = m[1]
}

match($0, / *\| *`-- Coarsening \(Level 0\): \.* ([0-9\.\-e]+) s/, m) {
    data["CoarseningLevelZero"] = m[1]
}

match($0, /    \|-- Coarsening: \.* ([0-9\.\-e]+) s/, m) {
    data["CoarseningTime"] = m[1]
}

match($0, /    \|-- Initial partitioning: \.* ([0-9\.\-e]+) s/, m) {
    data["InitialPartitioningTime"] = m[1]
}

match($0, /    \|-- Uncoarsening: \.* ([0-9\.\-e]+) s/, m) {
    data["UncoarseningTime"] = m[1]
}

match($0, /    `-- Uncoarsening: \.* ([0-9\.\-e]+) s/, m) {
    data["UncoarseningTime"] = m[1]
}

match($0, /MPI Communication: ([0-9\.\-e]+)/, m) {
    data["MPICommTime"] += m[1]
}



#match($0, /RESULT .*time=([0-9e\-\.]+).*/, m) {
    #data["Time"] = m[1]
#}

#match($0, /INPUT_GRAPH global_n=[0-9\.\+e]+ global_m=[0-9\.\+e]+ n=\[min=[0-9\.\+e]+\|avg=([0-9\.\+e]+)\|max=[0-9\.\+e]+\|sum=[0-9\.\+e]+\] m=[min=[0-9\.\+e]+\|avg=([0-9\.\+e]+)\|max=[0-9\.\+e]+\|sum=[0-9\.\+e]+\] ghost_n=[min=[0-9\.\+e]+\|avg=([0-9\.\+e]+)\|max=[0-9\.\+e]+\|sum=[0-9\.\+e]+\]/, m) {
    #data["LN"] = m[1]
    #data["LM"] = m[2]
    #data["GN"] = m[3]
#}

END {
    yield()
}

function header() {
    printf "Graph,"
    printf "N,"
    printf "M,"
    printf "K,"
    #printf "LN,"
    #printf "LM,"
    #printf "GN,"
    printf "Seed,"
    printf "Cut,"
    printf "Epsilon,"
    printf "Balance,"
    printf "Time,"
    printf "CompTime,"
    printf "CommTime,"
    printf "NumLevels,"
    printf "mPerLevel,"
    printf "ImbalancePerLevel,"
    printf "CoarseningLevel0,"
    printf "CoarseningTime,"
    printf "InitialPartitioningTime,"
    printf "UncoarseningTime,"
    printf "MPICommTime,"
    printf "RestCommTime,"
    printf "NumNodes,"
    printf "NumMPIsPerNode,"
    printf "NumThreadsPerMPI,"
    printf "Failed\n"
}

function yield() {
    if (length(data) == 0) { 
        return 
    }
    failed = length(data) < 23

    printf "%s,", data["Graph"]
    printf "%d,", data["N"]
    printf "%d,", data["M"]
    #printf "%d,", data["LN"]
    #printf "%d,", data["LM"]
    #printf "%d,", data["GN"]
    printf "%d,", data["K"]
    printf "%d,", data["Seed"]
    printf "%d,", data["Cut"]
    printf "%f,", data["Epsilon"]
    printf "%f,", data["Balance"]
    printf "%f,", data["Time"]
    printf "%f,", data["CompTime"]/(data["NumNodes"]*data["NumMPIsPerNode"])
    printf "%f,", data["CommTime"]/(data["NumNodes"]*data["NumMPIsPerNode"])
    printf "%d,", data["NumLevels"]
    printf "%s,", data["mPerLevel"]
    printf "%s,", data["ImbalancePerLevel"]
    printf "%f,", data["CoarseningLevelZero"]
    printf "%f,", data["CoarseningTime"]
    printf "%f,", data["InitialPartitioningTime"]
    printf "%f,", data["UncoarseningTime"]
    printf "%f,", data["MPICommTime"]/(data["NumNodes"]*data["NumMPIsPerNode"])
    printf "%f,", data["CommTime"] - (data["MPICommTime"]/(data["NumNodes"]*data["NumMPIsPerNode"]))
    printf "%d,", data["NumNodes"]
    printf "%d,", data["NumMPIsPerNode"]
    printf "%d,", data["NumThreadsPerMPI"]
    printf "%d\n", failed
    
    reset()
}

function reset() {
    split("", data)
    Summary = 0
}
